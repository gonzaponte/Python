#
# Module that contains useful mathematical functions
# Note: include 2D/3D numerical integration and LU methods for solving and for matrix inversion.
#
# Author: Gonzalo Martinez
#
# Last update: 01 / 11 / 2014
#
from __future__ import division

import math
import operator

import RandomNumbers
import Sequences
import Array

_ck = [1, 1, 1.1666666666666667, 1.4111111111111112, 1.7337301587301588, 2.14858024691358, 2.6771662391106834, 3.3481463612812816, 4.198493963426833, 5.275422686461255, 6.638995094615459, 8.365504501912918, 10.551802021076062, 13.320808170226233, 16.828521535783903, 21.272925305378422, 26.905302783242664, 34.044612310259325, 43.09574865388233, 54.572742243500116, 69.12823263611968, 87.5909148253449, 111.01311743420455, 140.73125712451855, 178.4426576114869, 226.30316759389552, 287.0512145039826, 364.1654599384032, 462.0651665758136, 586.3648580165928, 744.1979956155378, 944.6283922815563, 1199.1731641812473, 1522.4674820915277, 1933.1095997060772, 2454.7350833215687, 3117.382452435591, 3959.229335160556, 5028.7997269694015, 6387.77026383145, 8114.538168223919, 10308.757717309176, 13097.108284167014, 16640.62848102773, 21144.041841829647, 26867.615103829852, 34142.23720537835, 43388.5941585717, 55141.55285636318, 70081.16946751578, 89072.12295703808, 113213.8638300273, 143904.39090992877, 182921.3610539078, 232525.24426223486, 295590.518280687, 375772.5271056001, 477719.7016595282, 607343.4790149711, 772161.6124624547, 981734.8338048648, 1248222.2600492646, 1587087.845356177, 2017998.9679708031, 2565969.422696991, 3262813.313420688, 4148994.435668878, 5275978.760190067, 6709226.916042486, 8532000.831805097, 10850206.097009713, 13798551.91458787, 17548387.243025653, 22317669.345010333, 28383645.156283677, 36098983.902172975, 45912300.42921341, 58394264.50314188, 74270816.76177293, 94465426.07247011, 120152849.86727117, 152827529.32773897, 194390604.14660445, 247260616.7308516, 314514356.4045914, 400066050.9314205, 508895347.95125943, 647337373.0737486, 823451770.2638744, 1047492234.8652637, 1332503908.7124085, 1695083462.0469074, 2156346173.26114, 2743156388.234575, 3489693100.3887506, 4439441936.645287, 5647729703.494766, 7184949292.381353, 9140663011.017162, 11628823646.704496, 14794417769.261408, 18821918749.6038, 23946042547.322124, 30465433668.245316, 38760079651.90847, 49313469997.055664, 62740792268.50055, 79824810409.5432, 101561518573.88434, 129218234257.90741, 164407520459.75247, 209181250394.901, 266150303890.50085, 338636880595.63983, 430868318925.24414, 548223732354.85144, 697547857757.9147, 887550433945.7467, 1129314421529.4941, 1436942729228.528, 1828381197842.563, 2326465883487.654, 2960255777312.2544, 3766728764546.6973, 4792939834703.838, 6098767545721.891, 7760409094239.772, 9874828058264.695, 12565414510509.38, 15989188000119.291, 20345964002898.715, 25890019108660.715, 32944936147314.03, 41922496177639.02, 53346720623898.83, 67884467653552.18, 86384369717835.75, 109926386391574.78, 139884866714131.97, 178008804377303.22, 226523973435110.28, 288262910405627.94, 366830335380139.4, 466813675101634.7, 594050985897223.8, 755971927814227.8, 962031709275616.1, 1224263353438677.5, 1557980550633570.5, 1982672159770511.0, 2523140619616285.0, 3210950782772190.0, 4086273823946396.0, 5200233959789132.0, 6617895099374842.0, 8422061939603670.0, 1.07181176139771e+16, 1.3640180578149176e+16, 1.7358940511902476e+16, 2.2091631141017256e+16, 2.8114722769333964e+16, 3.5780076261056e+16, 4.5535502517123976e+16, 5.7950928972836344e+16, 7.375170235806779e+16, 9.386097406342586e+16, 1.194536453281859e+17, 1.520250251428208e+17, 1.9347821374008256e+17, 2.462353191087515e+17, 3.133790070928906e+17, 3.9883265878232794e+17, 5.075896657210447e+17, 6.460052659026147e+17, 8.221679795239183e+17, 1.046372356782543e+18, 1.3317206726954445e+18, 1.6948887422747558e+18, 2.157100624180936e+18, 2.745369193189228e+18, 3.494075105509919e+18, 4.4469764650615644e+18, 5.65976668003228e+18, 7.203330049908593e+18, 9.16788541775203e+18, 1.1668260146326415e+19, 1.4850602766016487e+19, 1.8900926762017825e+19, 2.4055985037123625e+19, 3.0617110865796194e+19, 3.896783461459267e+19, 4.959630628731592e+19, 6.312383497205352e+19, 8.034121395596771e+19, 1.022549555507646e+20, 1.3014613916321576e+20, 1.6564531374181705e+20, 2.108278345706985e+20, 2.6833520937363882e+20, 3.415295497248868e+20, 4.3469015979989054e+20, 5.532637587720347e+20, 7.041829698021504e+20, 8.962717010348533e+20, 1.1407611258279301e+21, 1.451946437835175e+21, 1.8480227898829056e+21, 2.3521493054073025e+21, 2.9938033905447946e+21, 3.81050455405003e+21, 4.850008554226941e+21, 6.173100201181402e+21, 7.85714815808922e+21, 1.0000629655073725e+22, 1.2728889760883434e+22, 1.6201472069485801e+22, 2.0621449575181958e+22, 2.624730150786156e+22, 3.3408030823823792e+22, 4.252240660917263e+22, 5.412345694154735e+22, 6.8889644887463655e+22, 8.768455125445742e+22, 1.1160738534043332e+23, 1.4205727833939898e+23, 1.8081512033003742e+23, 2.301477280610319e+23, 2.9294043709705565e+23, 3.728658747297992e+23, 4.745987866747598e+23, 6.0408948480169265e+23, 7.689119126148895e+23, 9.787066905575214e+23, 1.2457450598694749e+24, 1.5856467167911327e+24, 2.0182935322132554e+24, 2.56899261220378e+24, 3.269956742739276e+24, 4.162188830977047e+24, 5.29788059201424e+24, 6.743465817307865e+24, 8.583506859239015e+24, 1.0925641716628254e+25, 1.390688116087872e+25, 1.7701624332891435e+25, 2.253186178901886e+25, 2.8680162963628887e+25, 3.65062079356486e+25, 4.64678307700872e+25, 5.914780568827868e+25, 7.528794334978831e+25, 9.583249226803152e+25, 1.2198338486087327e+26, 1.5527056071864424e+26, 1.9764148191314916e+26, 2.5157507820016066e+26, 3.202267895035229e+26, 4.076131927675437e+26, 5.188470166151136e+26, 6.604362958065327e+26, 8.406651708114749e+26, 1.070078615534156e+27, 1.362099457972208e+27, 1.7338138002617987e+27, 2.2069707992307783e+27, 2.8092553129766973e+27, 3.5759078872537035e+27, 4.551786882122099e+27, 5.793993413999038e+27, 7.375212725266553e+27, 9.38796752060043e+27, 1.1950032179996929e+28, 1.521132469669384e+28, 1.9362679670010432e+28, 2.4647015770104914e+28, 3.1373551226889776e+28, 3.993589928068764e+28, 5.083510260825419e+28, 6.470895479502311e+28, 8.236932488111568e+28, 1.0484966940114117e+29, 1.3346551258108459e+29, 1.698914343479315e+29, 2.1625907197348948e+29, 2.7528187106384495e+29, 3.504138872073312e+29, 4.460519325442651e+29, 5.677928984728568e+29, 7.227613151519017e+29, 9.200263194311115e+29, 1.1711324359629287e+30, 1.490775237839367e+30, 1.8976614330834578e+30, 2.415603718078221e+30, 3.074914480404716e+30, 3.9141799259384345e+30, 4.982518472344142e+30, 6.3424555967471e+30, 8.073583408587755e+30, 1.0277219151673152e+31, 1.3082335310994334e+31, 1.6653108432744147e+31, 2.1198528517259624e+31, 2.698463146086269e+31, 3.4350070564439437e+31, 4.372593858219362e+31, 5.566100059507647e+31, 7.085381472512936e+31, 9.019362090068807e+31, 1.1481239114097847e+32, 1.4615108819830653e+32, 1.8604401112537055e+32, 2.3682616511428512e+32, 3.0146994076476434e+32, 3.837591036843307e+32, 4.885102794460386e+32, 6.2185489929202684e+32, 7.915981113430833e+32, 1.0076756676595885e+33, 1.2827355330677744e+33, 1.632878262996046e+33, 2.0785994921049277e+33, 2.6459897073789e+33, 3.368261541266627e+33, 4.28769399419903e+33, 5.458107403904022e+33, 6.948014050344369e+33, 8.844628838916001e+33, 1.125897485645938e+34, 1.4332382692553854e+34, 1.8244764015170269e+34, 2.3225143762243007e+34, 2.95650675404816e+34, 3.7635669151432096e+34, 4.790939744760508e+34, 6.0987674504148285e+34, 7.763610434488856e+34, 9.8829293516629e+34, 1.258079075439676e+35, 1.6015130366617557e+35, 2.0386999220048504e+35, 2.5952333978598426e+35, 3.3036940560985143e+35, 4.205556830304045e+35, 5.353619139402392e+35, 6.815091919811928e+35, 8.67553451837933e+35, 1.1043863825408298e+36, 1.4058730922845874e+36, 1.7896638589796128e+36, 2.2782274934031465e+36, 2.9001668172047304e+36, 3.6918932758805276e+36, 4.699758734321794e+36, 5.982769270876723e+36, 7.616039862402159e+36, 9.695192232805962e+36, 1.2341953361133584e+37, 1.5711282445866311e+37, 2.0000443616136613e+37, 2.5460555608260726e+37, 3.241129465828637e+37, 4.125961149044238e+37, 5.252355831835968e+37, 6.686262098328563e+37, 8.511633225136887e+37, 1.0835342718406759e+38, 1.379344187749945e+38, 1.7559125785835345e+38, 2.2352874165261808e+38, 2.8455360878555487e+38, 3.6223887982380126e+38, 4.6113306613288574e+38, 5.870264971718353e+38, 7.472903609264815e+38, 9.513083099583617e+38, 1.2110259058169427e+39, 1.5416500747311935e+39, 1.9625395316230095e+39, 2.4983383119531578e+39, 3.180418786548949e+39, 4.048718656992936e+39, 5.154079499603588e+39, 6.561223795498851e+39, 8.3525447725583e+39, 1.063293098173458e+40, 1.3535908122357704e+40, 1.7231457767106948e+40, 2.193597083429498e+40, 2.792491866347206e+40, 3.5548983690685125e+40, 4.525459431139752e+40, 5.761006642607668e+40, 7.333888248912872e+40, 9.336205685342695e+40, 1.1885206829723747e+41, 1.5130151799832128e+41, 1.92610533550006e+41, 2.451980373960446e+41, 3.1214339558386497e+41, 3.973667418419637e+41, 5.058585368661464e+41, 6.439718059891684e+41, 8.197941689637501e+41, 1.0436214483700587e+42, 1.3285605918203355e+42, 1.691297216051357e+42, 2.1530727216699615e+42, 2.740928200345581e+42, 3.489287980388428e+42, 4.441975546932877e+42, 5.654779894231103e+42, 7.198722602790153e+42, 9.164216971114385e+42, 1.166636277398843e+43, 1.485168672613875e+43, 1.8906723396761174e+43, 2.4068939105367214e+43, 3.0640638545213135e+43, 3.900666856343432e+43, 4.965695590744577e+43, 6.321519884923024e+43, 8.047539300316483e+43, 1.0244833046676263e+44, 1.3042079550848065e+44, 1.6603092361136416e+44, 2.113641373055445e+44, 2.690752773279515e+44, 3.4254408181427192e+44, 4.360731193091149e+44, 5.5513976776361686e+44, 7.0671699699839196e+44, 8.99681741730861e+44, 1.1453347822085211e+45, 1.4580625802079635e+45, 1.8561798321501147e+45, 2.363002085287851e+45, 3.0082112372514085e+45, 3.829593892872759e+45, 4.8752543898330254e+45, 6.206432105309738e+45, 7.901088047722591e+45, 1.0058470793793119e+46, 1.2804929190388835e+46, 1.6301312262568664e+46, 2.0752389730813592e+46, 2.64188448864348e+46, 3.3632542236222193e+46, 4.281596412995076e+46, 5.450695476149376e+46, 6.939022078776153e+46, 8.833743354662499e+46, 1.1245828165433781e+47, 1.431654641331285e+47, 1.8225743072686413e+47, 2.3202371553147936e+47, 2.953790333811603e+47, 3.760339931007175e+47, 4.7871242643440946e+47, 6.094280618124099e+47, 7.758367480424739e+47, 9.876848581111577e+47, 1.2573801367379328e+48, 1.6007184271163614e+48, 2.037808842475209e+48, 2.5942515714866367e+48, 3.3026373039633213e+48, 4.2044561014620926e+48, 5.352527519774573e+48, 6.814094321580899e+48, 8.674760986116687e+48, 1.1043507705259487e+49, 1.405907355039438e+49, 1.7898082691676214e+49, 2.2785389648406835e+49, 2.9007249526517073e+49, 3.692808467001416e+49, 4.701182981021537e+49, 5.984910597893739e+49, 7.61918148684595e+49, 9.6997179970717e+49, 1.2348381417072473e+50, 1.5720309791722917e+50, 2.0013004891076e+50, 2.5477900596773975e+50, 3.2435090321667793e+50, 4.129207611994674e+50, 5.256763771783385e+50, 6.6922219597791e+50, 8.519661606954904e+50, 1.0846122032382664e+51, 1.3807872226144892e+51, 1.757839276691183e+51, 2.2378537421925263e+51, 2.8489469655282278e+51, 3.626913181517385e+51, 4.6173211703604485e+51, 5.87818346747807e+51, 7.483354479274373e+51, 9.526856555110565e+51, 1.2128387422921054e+52, 1.5440331597118339e+52, 1.965668646641743e+52, 2.5024425926676494e+52, 3.1857967209840857e+52, 4.0557588338825264e+52, 5.163287505808621e+52, 6.573257070708456e+52, 8.368257757727444e+52, 1.065343357942192e+53, 1.3562641366667355e+53, 1.7266291735450242e+53, 2.1981331296253802e+53, 2.7983950848394896e+53, 3.562576398721728e+53, 4.5354403845877575e+53, 5.773974450456041e+53, 7.350728308954691e+53, 9.358063805427025e+53, 1.1913565315706076e+54, 1.5166927650908276e+54, 1.9308724958763067e+54, 2.4581574299745926e+54, 3.1294347856581375e+54, 3.9840266325298764e+54, 5.07199333969534e+54, 6.45706606904576e+54, 8.220380099518496e+54, 1.0465227681428645e+55, 1.332310884485381e+55, 1.6961434621390915e+55, 2.1593333938680078e+55, 2.749013868264748e+55, 3.4997278312847993e+55, 4.455451515258077e+55, 5.672170575860835e+55, 7.221159750186545e+55, 9.193158162519715e+55, 1.1703684873086677e+56, 1.4899806062688238e+56, 1.8968750285907322e+56, 2.414887648941072e+56, 3.074363732215433e+56, 3.9139355735586987e+56, 4.982785626391601e+56, 6.343527677419345e+56, 8.075874854453833e+56, 1.0281309347748965e+57, 1.3089027408836843e+57, 1.6663507900450047e+57, 2.1214147783800837e+57, 2.700752901734294e+57, 3.438303549798925e+57, 4.377273493275207e+57, 5.572669038349426e+57, 7.094518431751628e+57, 9.031974295720295e+57, 1.1498536427737002e+58, 1.463870093529373e+58, 1.8636425236449432e+58, 2.3725904837904344e+58, 3.020529323610073e+58, 3.8454168707847904e+58, 4.895577126648975e+58, 6.232531251770949e+58, 7.934601692786891e+58, 1.0101500596078029e+59, 1.2860171318194499e+59, 1.6372225255560126e+59, 2.084340967787656e+59, 2.6535661236331593e+59, 3.378245130015256e+59, 4.300832212799976e+59, 5.475375840267348e+59, 6.9706851232836335e+59, 8.874360966656828e+59, 1.1297928138253717e+60, 1.438336892065529e+60, 1.8311441123161276e+60, 2.331226777055738e+60, 2.967881887381666e+60, 3.778407512407917e+60, 4.810287906160028e+60, 6.1239753893723944e+60, 7.796431975967445e+60, 9.92563823485768e+60, 1.2636333544836158e+61, 1.6087324043690677e+61, 2.048078641899792e+61, 2.6074112618382857e+61, 3.319498942205401e+61, 4.2260596341818e+61, 5.38020465922129e+61, 6.849550305706019e+61, 8.720179224559491e+61, 1.1101683710850158e+62, 1.4133586343538389e+62, 1.7993514151771568e+62, 2.29076052113849e+62, 2.916375736862633e+62, 3.7128495302595953e+62, 4.726844412934047e+62, 6.017766763929492e+62, 7.661247285829655e+62, 9.75357200617911e+62, 1.241732342812724e+63, 1.5808562335026508e+63, 2.0125971018456365e+63, 2.562249361633879e+63, 3.2620155550397554e+63, 4.152893031197307e+63, 5.2870758975024125e+63, 6.731012970836622e+63, 8.56930089036673e+63, 1.0909640485009738e+64, 1.3889146783969855e+64, 1.768238236783011e+64, 2.2511584727239844e+64, 2.8659686842099875e+64, 3.6486893847839983e+64, 4.645178700542573e+64, 5.913819144543408e+64, 7.528938185522989e+64, 9.585163020791253e+64, 1.2202964698212755e+65, 1.55357164162682e+65, 1.9778679547164137e+65, 2.518044387376258e+65, 3.205749232434302e+65, 4.081274355487035e+65, 5.195915879255091e+65, 6.614979607250543e+65, 8.421607275646054e+65, 1.0721647815174242e+66, 1.3649859032888281e+66, 1.7377803074121033e+66, 2.2123898265230853e+66, 2.816621628236889e+66, 3.5858774443292016e+66, 4.565227770277207e+66, 5.812052564606936e+66, 7.399403169497264e+66, 9.420282431493265e+66, 1.1993093799932556e+67, 1.5268578672972802e+67, 1.943864846004366e+67, 2.4747628844320537e+67, 3.150657506405004e+67, 4.0111496968431053e+67, 5.1066561685226165e+67, 6.501363338582954e+67, 8.27698809376285e+67, 1.0537565694888252e+68, 1.34155453535767e+68, 1.7079550633730547e+68, 2.1744259376538e+68, 2.7682982035910904e+68, 3.5243675418137473e+68, 4.486933010900701e+68, 5.71239261379699e+68, 7.272547768754243e+68, 9.258810302375066e+68, 1.1787558463776432e+69, 1.5006955783512218e+69, 1.9105632313501672e+69, 2.4323736907019844e+69, 3.096700812472997e+69, 3.9424688224044164e+69, 5.019232986835994e+69, 6.390083187409289e+69, 8.135340529472514e+69, 1.0357263580807298e+70, 1.3186039995242704e+70, 1.6787414591229515e+70, 2.137240084157756e+70, 2.720964480570258e+70, 3.464116595281031e+70, 4.4102397190056535e+70, 5.614769831771708e+70, 7.148283784424496e+70, 9.100634639974293e+70, 1.158621648114351e+71, 1.4750667170824687e+71, 1.8779401808193106e+71, 2.3908476891913586e+71, 3.043842176865456e+71, 3.8751847812121572e+71, 4.933586713281747e+71, 6.281063443208146e+71, 7.996568439859764e+71, 1.0180619382462119e+72, 1.2961187915782554e+72, 1.6501198057848519e+72, 2.1008072628331287e+72, 2.6745887069843574e+72, 3.405084281519936e+72, 4.335096686347586e+72, 5.519119186396924e+72, 7.026528628031381e+72, 8.945650559088087e+72, 1.138893464955858e+73, 1.44995436686838e+73, 1.8459742102551282e+73, 2.3501575947574275e+73, 2.9920469468560245e+73, 3.809253563219006e+73, 4.8496614533054843e+73, 6.174233117089572e+73, 7.860581664803711e+73, 1.0007518590281892e+74, 1.2740843679076454e+74, 1.6220716316977343e+74, 2.0651040128814505e+74, 2.6291410851305693e+74, 3.3472327540127943e+74, 4.261455843139198e+74, 5.425379622621509e+74, 6.907204750948468e+74, 8.793759561192763e+74, 1.1195587860058872e+75, 1.4253426367463752e+75, 1.8146451352943052e+75, 2.3102777694698874e+75, 2.9412825572321356e+75, 3.7446338039126695e+75, 4.767404665109939e+75, 6.069525469245182e+75, 7.727295429266765e+75, 9.837853519562164e+75, 1.2524870498688755e+76, 1.5945795614533213e+76, 2.030108262898434e+76, 2.584593578246216e+76, 3.290526398107462e+76, 4.189271948350959e+76, 5.333493670713343e+76, 6.790239148819239e+76, 8.644868907528722e+76, 1.1006058304130282e+77, 1.401216561088152e+77, 1.7839339444492141e+77, 2.2711840620512353e+77, 2.891518327173624e+77, 3.6812865273473655e+77, 4.686766834560777e+77, 5.966877597662665e+77, 7.596629822960441e+77, 9.67152265216131e+77, 1.2313139405002233e+78, 1.5676272105232545e+78, 1.9957991975565197e+78, 2.5409197418339186e+78, 3.234931617605561e+78, 4.118502319694028e+78, 5.243407104619022e+78, 6.675562929290696e+78, 8.49889107216201e+78, 1.0820234781668565e+79, 1.3775620120353934e+79, 1.753822688310842e+79, 2.2328536676811757e+79, 2.8427252828561448e+79, 3.619174921672559e+79, 4.607701191145733e+79, 5.866230078702969e+79, 7.468509345529938e+79, 9.50843006096879e+79, 1.2105528516922006e+80, 1.5411990930972347e+80, 1.9621571409778427e+80, 2.4980945760733226e+80, 3.180416647991663e+80, 4.0491065972620775e+80, 5.155068642849842e+80, 6.563110933476952e+80, 8.355743262931807e+80, 1.0638012094713622e+81, 1.3543656227728857e+81, 1.7242943824449171e+81, 2.195265005102806e+81, 2.7948760019162954e+81, 3.558264142285339e+81, 4.530163458838271e+81, 5.7675266517827425e+81, 7.342862507470517e+81, 9.348484904797397e+81, 1.1901922402569869e+82, 1.5152805411664427e+82, 1.929163454317535e+82, 2.4560943961903036e+82, 3.126951392355302e+82, 3.9810465358503034e+82, 5.068429685607832e+82, 6.452821403221059e+82, 8.215347000275998e+82, 1.0459290514328628e+83, 1.3316147200456614e+83, 1.6953329219706882e+83, 2.1583976084936202e+83, 2.747944476576923e+83, 3.498521138566525e+83, 4.45411163676798e+83, 5.670713941728546e+83, 7.219621478657322e+83, 9.191600983454445e+83, 1.1702211516040054e+84, 1.489857633220648e+84, 1.8968004454982275e+84, 2.414896718184703e+84, 3.0745072767259885e+84, 3.9142858218123046e+84, 4.983444082927969e+84, 6.344635687562046e+84, 8.077627745613487e+84, 1.0283975310121365e+85, 1.3092972645944472e+85, 1.66692300614908e+85, 2.12223203198917e+85, 2.701905992766829e+85, 3.439914500835432e+85, 4.379505805449924e+85, 5.575741213441676e+85, 7.098721777720243e+85, 9.037696344448348e+85, 1.1506291699431782e+86, 1.464917131197606e+86, 1.8650512893772497e+86, 2.374480157747483e+86, 3.023057122082586e+86, 3.848789910997706e+86, 4.900067929471911e+86, 6.23849798289675e+86, 7.942514572326703e+86, 1.0111976333625272e+87, 1.2874017984007683e+87, 1.6390500715805142e+87, 2.0867497650924853e+87, 2.6567370230039067e+87, 3.3824143247069715e+87, 4.306307955017339e+87, 5.4825601543836595e+87, 6.980101996596398e+87, 8.886692934174593e+87, 1.1314063741123608e+88, 1.4404464245439857e+88, 1.8338999569060777e+88, 2.334824340548342e+88, 2.972575030740781e+88, 3.7845258848708906e+88, 4.8182593823123364e+88, 6.1343551022141135e+88, 7.80993987350756e+88, 9.943207648169995e+88, 1.2659173978109505e+89, 1.6117002328370663e+89, 2.0519331574847872e+89, 2.612415131167282e+89, 3.3259920904836607e+89, 4.234481832467997e+89, 5.391124681107768e+89, 6.863703555492072e+89, 8.738516287559599e+89, 1.1125432982684402e+90, 1.4164334804273355e+90, 1.8033311520690766e+90, 2.2959098223620433e+90, 2.923036285183796e+90, 3.721462322367282e+90, 4.737978498621217e+90, 6.032156269503493e+90, 7.679839101542887e+90, 9.777587199022434e+90, 1.244833631753543e+91, 1.584860229536908e+91, 2.017765351984711e+91, 2.5689188875760844e+91, 3.2706205555840745e+91, 4.163992805399873e+91, 5.3013907666470316e+91, 6.749470484226205e+91, 8.593095251075033e+91, 1.0940308967995478e+92, 1.392866799287463e+92, 1.7733302555762783e+92, 2.2577180177380985e+92, 2.8744172577001424e+92, 3.6595691854202113e+92, 4.659187090651388e+92, 5.93185293603875e+92, 7.552150535373221e+92, 9.615036518534844e+92, 1.2241405243853018e+93, 1.5585173790210527e+93, 1.9842302245946465e+93, 2.5262277930337527e+93, 3.216273658313505e+93, 4.094807740095837e+93, 5.213316286055576e+93, 6.637349226539624e+93, 8.450361734806048e+93, 1.0758605129129721e+94, 1.369735375038111e+94, 1.7438832744395204e+94, 2.220231136114151e+94, 2.826695329438958e+94, 3.598817716402947e+94, 4.5818485957930896e+94, 5.833398615735514e+94, 7.426815071883148e+94, 9.455480461825634e+94, 1.2038285216002565e+95, 1.5326595339179222e+95, 1.9513123307316278e+95, 2.4843222106976882e+95, 3.162926431535823e+95, 4.026894892136263e+95, 5.1268608778015555e+95, 6.527288464461975e+95, 8.310250489900085e+95, 1.058023850434585e+96, 1.3470286593323384e+96, 1.7149767966906456e+96, 2.183432124435764e+96, 2.7798488176985955e+96, 3.539180345989025e+96, 4.505927959814035e+96, 5.736748737191218e+96, 7.303776038402822e+96, 9.29884696917463e+96, 1.1838884609194187e+97, 1.507275043985996e+97, 1.9189968568719054e+97, 2.4431833047998383e+97, 3.1105549250152903e+97, 3.960223807983586e+97, 5.041985819045368e+97, 6.419238960250594e+97, 8.172698908252816e+97, 1.0405129484225318e+98, 1.3247365293895684e+98, 1.6865979506072864e+98, 2.147304615481122e+98, 2.733856910435187e+98, 3.4806306101502003e+98, 4.431391531664227e+98, 5.641860510361746e+98, 7.182979023734022e+98, 9.145066851864063e+98, 1.164311544347898e+99, 1.4823527217121939e+99, 1.88726957694914e+99, 2.4027929853837573e+99, 3.0591361353733727e+99, 3.894765236205257e+99, 4.958653913117264e+99, 6.31315341377083e+99, 8.037646841739568e+99, 1.023320158254838e+100, 1.302849258953958e+100, 1.6587343679021941e+100, 2.111832881202576e+100, 2.688699607121593e+100, 3.4231430751927022e+100, 4.358206968455504e+100, 5.54869280611734e+100, 7.064371725479164e+100, 8.994073598656656e+100, 1.145089313844331e+101, 1.4578818112170813e+101, 1.8561168129385728e+101, 2.3631338583407152e+101, 3.008647942753513e+101, 3.830491047188195e+101, 4.876829387744531e+101, 6.208986333484005e+101, 7.905036438672616e+101, 1.0064381228977231e+102, 1.2813574920134454e+102, 1.6313741504073292e+102, 2.07700179049253e+102, 2.6443576652072983e+102, 3.3666932698841826e+102, 4.286343149418068e+102, 5.457206047163513e+102, 6.947903811758362e+102, 8.84580320048878e+102, 1.1262136290964456e+103, 1.433851960079723e+103, 1.825525399137615e+103, 2.324189180125626e+103, 2.959069053410902e+103, 3.767374160354742e+103, 4.7964778027760315e+103, 6.106693919460329e+103, 7.774811995483325e+103, 9.898597581015428e+103, 1.2602522189594143e+104, 1.6045058398482604e+104, 2.0427967708619467e+104, 2.600812551532398e+104, 3.31125762385339e+104]

def BinomialCoefficient( N, k ):
    '''
        Binomial coefficient.
    '''
    if k > N:
        raise ValueError('k must not be greater than N')
    return 0 if not N else 1 if not k or N == k else BinomialCoefficient( N - 1, k - 1 ) + BinomialCoefficient( N - 1, k )

def Factorial( N ):
    '''
        Factorial function.
    '''
    assert isinstance( N, int ), ValueError( 'The factorial function is only defined for integers. Use Gamma for real numbers.' )
    assert N >=   0,    ValueError( 'The factorial function is only defined for positive numbers.' )
    assert N <= 170, OverflowError( 'Input too large.' )
    return N * Factorial( N - 1 ) if N else 1

def DoubleFactorial( N ):
    '''
        Double factorial function.
    '''
    assert isinstance( N, int ), ValueError( 'The double factorial function is only defined for integers.' )
    assert N >=   0,    ValueError( 'The double factorial function only defined for positive numbers.' )
    assert N <= 300, OverflowError( 'Input too large.' )
    return N * DoubleFactorial( N - 2 ) if N > 1 else 1

def Asymmetry( x, y ):
    '''
        Asymmetry factor, i.e. (x-y)/(x+y).
    '''
    return ( x - y ) / ( x + y )

def Sign( x ):
    '''
        Sign function. -1 for negative numbers, 1 otherwise.
    '''
    return -1 if x < 0 else 1

def LogGamma( x ):
    '''
        log( Gamma(x) ) where Gamma is the Euler-Gamma function.
    '''
    assert x >= 0, ValueError( 'Euler Gamma is only defined for positive numbers.' )
    t  =   x + 5.5
    t -= ( x + 0.5 ) * math.log( t )
    y  =  1.000000000190015
    y += 76.18009172947146     / ( x + 1. )
    y -= 86.50532032941677     / ( x + 2. )
    y += 24.01409824083091     / ( x + 3. )
    y -=  1.231739572450155    / ( x + 4. )
    y +=  0.001208650973866179 / ( x + 5. )
    y -=  0.5395239384953e-5   / ( x + 6. )
    
    return math.log( 2.5066282746310005 * y / x ) - t

def Gamma( x ):
    '''
        Euler Gamma function: integral_0^inf{ t^(x-1) exp(-t) dt }
    '''
    assert x >= 0, ValueError( 'Euler Gamma is only defined for positive numbers.' )
    return math.exp( LogGamma( x ) )

def Beta( x, y ):
    '''
        Beta function.
    '''
    assert x >= 0 and y>=0, ValueError( 'Euler Gamma is only defined for positive numbers.' )
    return math.exp( logGamma( x ) + logGamma( y ) - logGamma( x + y ) )

def IncompleteGamma( x, a ):
    '''
        Return the value of the incomplete gamma function.
    '''
    return math.exp(-a) if x is 1 else math.sqrt(pi) * Cerf( math.sqrt(pi) ) if x == 0.5 else (x-1) * IncompleteGamma(x-1,a) + math.pow( a, x - 1 ) * math.exp(-a)

def Erf( x, p = 1e-15 ):
    '''
        Error function up to x with precision p.
    '''
    if not x:
        return 0.
    
    dif = p + 1.
    new = 0.
    n   = 0
    
    while dif > p:
        old  = new
        new += x ** ( 2 * n + 1 ) / ( ( 2*n + 1. ) * Factorial( n ) )
        n   += 1
        new -= x ** ( 2 * n + 1 ) / ( ( 2*n + 1. ) * Factorial( n ) )
        n   += 1
        dif  = abs( 1. - old/new )
    
    return 2. * new / math.sqrt( math.pi )

def Cerf( x, p = 1e-15 ):
    '''
        Complementary error function from x with precision p.
    '''
    return 1. - Erf( x, p )

def Ierf( x ):
    '''
        Inverse of the error function.
    '''
    return sum( [ _ck[k]/(2.*k+1.) * math.pow( 0.5 * math.sqrt(math.pi) * x ,2*k+1) for k in range(len(_ck)) ] )

def Bessel( n, p = 1e-15 ):
    '''
        1st kind nth-Bessel function with precision p.
    '''
    
    besselsign = -1 if n < 0 and n % 2 else 1
    
    def bessel( x ):
        dif = p + 1
        m   = 0
        new = 0.
        x  *= 0.5
        
        while dif > p:
            old = new
            new += x ** ( 2*m + n ) / ( Factorial( m ) * Factorial( m + n ) )
            m += 1
            new -= x ** ( 2*m + n ) / ( Factorial( m ) * Factorial( m + n ) )
            m += 1
            dif = abs( 1. - old/new )
        
        return besselsign * new
    
    return bessel

def Recursive( f, x0 = 0., p = 1e-12 ):
    '''
        Calculates the root of a transcedental equation of type x = f(x) with precision p and an initial estimation x0.
    '''
    
    new = 0.
    dif = p + 1
    N   = 0
    
    while dif > p:
        N  += 1
        y   = f( x0 )
        dif = abs( 1. - x0/y )
        x0  = y
        
        if N > 1000000:
            print 'The solution does not converge'
            return None
    
    return x0

def RK4( F, x0, y0, x1, dx = 1e-6 ):
    ''' 
        Solves a differential equation using the Runge-Kutta method. The equation must be of the form: y' = F(x,y) with the initial values x0,y0.
        The solution is a vector from x0 to x1 with the number of steps given by the precision dx.
    '''
    
    y = list()
    N = int( math.ceil( (x1-x0)/dx ) )
    
    for i in xrange(N):
        k1  = F( x0           , y0               )
        k2  = F( x0 + 0.5*dx  , y0 +   0.5*dx*k1 )
        k3  = F( x0 + 0.5*dx  , y0 +   0.5*dx*k2 )
        k4  = F( x0 +     dx  , y0 +       dx*k3 )
        y  += [ y0 + ( k1 +2*k2 + 2*k3 + k4 )*dx/6. ]
        x0 += dx
        y0  = y[-1]
    
    return y

def PolynomialInterpolator( xdata, ydata ):
    '''
        Returns a polynomial interpolator of degree npoints - 1 for xdata, ydata.
    '''
    A = Array.Matrix( map( lambda x: [ x**i for i in range(len(xdata)) ], xdata ) )
    B = Array.Vector( *ydata )
    return Polynom( A.Inverse() ** B )

def LinearInterpolator( xdata, ydata, OutOfRange = False ):
    '''
        Returns a linear interpolator for xdata, ydata. Set OutOfRange to True to coerce out of range inputs to the limits. It raises an error otherwise.
    '''
    n = len(xdata)
    def interpolator(x0):
        found = False
        for i in range(n-1):
            if x0 >= xdata[i] and x0 < xdata[i+1]:
                x1, x2 = xdata[i:i+2]
                y1, y2 = ydata[i:i+2]
                found = True
                break
        if not found:
            if OutOfRange:
                return ydata[0] if x0 < xdata[0] else ydata[-1]
            else:
                raise ValueError('x0 = {0} out of range'.format(x0) )
        
        slope = (y2-y1)/(x2-x1)
        const = y1 - slope * x1
        
        return slope * x0 + const

def SplineInterpolator( xdata, ydata, order = 3 ):
    '''
        Returns a spline interpolator for xdata, ydata of a given order < npoints. order must be an odd number to perform better.
    '''
    ndata = len(xdata)
    nleft = (order+1)//2 - 1
    nright = nleft + 2
    def interpolator(x0):
        found = False
        for i in range(ndata-1):
            if x0 >= xdata[i] and x0 < xdata[i+1]:
                found = True
                if i < nleft:
                    xsubset = xdata[:order+1]
                    ysubset = ydata[:order+1]
                elif i == ndata + 1 - nright:
                    xsubset = xdata[-order-1:]
                    ysubset = ydata[-order-1:]
                else:
                    xsubset = xdata[i-nleft:i+nright]
                    ysubset = ydata[i-nleft:i+nright]
                break
        if not found:
            raise RuntimeError( 'Data point {0} out of range [{1},{2})'.format(x0,xdata[0],xdata[-1]) )
        return PolynomialInterpolator( xsubset, ysubset )(x0)
    return interpolator

def FindRoots( F, lower, upper, ndivs = 1e5 ):
    '''
        Finds the roots of a function.
    '''
    
    ndivs = int( round(ndivs) )
    div = ( lower - upper ) / (ndivs)
    f0 = F(lower)
    
    roots = []
    for i in xrange( ndivs ):
        f = F( lower + i * div )
        if ( Sign(f) != Sign(f0) ):
            roots += [ lower + ( i - 0.5 ) * div ]
        
        f0 = f

    return roots

def Root( F, lower, upper, precision = 1e-6, timeout = 1e9 ):
    '''
        Find the root of the function F in the interval [lower,upper].
    '''
    lower, upper = float(lower), float(upper)
    flower, fupper = F(lower), F(upper)
    
    counter = 0
    while counter < timeout:
        middle  = lower - flower * ( upper - lower ) / ( fupper - flower )
        fmiddle = F(middle)
        
        if abs( fmiddle ) < precision:
            return middle
        
        elif Sign( fmiddle ) == Sign( flower ):
            lower  =  middle
            flower = fmiddle
        
        elif Sign( fmiddle ) == Sign( fupper ):
            upper  =  middle
            fupper = fmiddle

        counter += 1
    
    print 'Root not found. Try to increase the timeout.'
    return None

def Solve2( p2, p1, p0 ):
    '''
        Solves a 2nd degree polynomial.
    '''
    
    a = ( p1**2 - 4 * p2 * p0 )**.5
    return -.5 * ( p1 - a ) / p2, -.5 * ( p1 + a ) / p2

def Derivative( F, x, N = 1, h = 1e-4 ):
    '''
        Returns the derivative of order N the function F at x with step size h.
    '''

    a = Solve( [ [ (j - 2.)**i for j in range(5) ] + [ Factorial(N) if i == N else 0. ] for i in range(5) ] )
    
    return sum( [ a[i] * f( x + (i-2) * h ) for i in range(5) ] ) / h**n

def Solve( M, N = None ):
    '''
        Solves a system of equations. The input must be in matrix form; it accepts both a matrix of coeficients with the independent terms joined or separated. The return is a vector of values.
    '''

    f = len( m )
    c = f + 1
    
    def Pivoting( m, x ):
        ''' Pivotes on the matrix m to put the biggest element in column x in (x,x).'''
        
        maxval = abs( m[x][x] )
        maxpos = x

        for i in range( x+1, f ):
            if abs( m[i][x] ) > maxval:
                maxval = abs(m[i][x])
                maxpos = i

        for i in range(c):
            aux          = m[x][i]
            m[x][i]      = m[maxpos][i]
            m[maxpos][i] = aux

        return m

    if N:
        for i in range(f):
            m[i].append(n[i])
    
    for i in range(f):
        M = Pivoting( M, i )
        for j in range( i+1, f ):
            factor = m[j][i] / m[i][i]
            m[j] = map( lambda x,y: x - factor * y, m[j], m[i] )
    
    return [ ( m[i][-1] - sum( [ x[j] * m[i][j] for j in range( i+1, f ) ] ) ) / m[i][i] for i in Sequences.Reversed(range(f)) ]

class Polynom:
    '''
        Good performance of polynoms.
    '''

    def __init__( self, coefs ):
        '''
            Polinom with the given coefficients in power-increasing order: a0 + a1 x + a2 x2 + ... + an xn
        '''
        self.coefs   = tuple(coefs)
        self.n       = len(self.coefs)
        self.degree  = self.n - 1
    
    def _subpol( self ):
        '''
            Create subpolinom: a1 + a2 x + a3 x2 + ... 
        '''
        return self.__class__( self.coefs[1:] ) if self.degree else self.__class__([])

    def Derivative( self, k = 1 ):
        '''
            Compute kth-derivative.
        '''
        der = self.__class__(self.coefs)
        for i in range(k):
            der = der._Derivative()
        return der
        
    def _Derivative( self ):
        '''
            Compute first derivative.
        '''
        return self.__class__( [ i * self.coefs[i] for i in range(1,self.n) ] )

    def __call__( self, x ):
        '''
            Evaluate.
        '''
        return self.coefs[0] + x * self._subpol()(x) if self.n else 0.

    def __str__( self ):
        return ' + '.join( [ '{0} x{1}'.format(coef,i) for i,coef in enumerate(self.coefs) ] )

class Integrator:
    '''
        Class for integrals.
    '''
    def __init__( self, fun, lower = 0., upper = 1. ):
        '''
            Initialize with some function of N variables and lower and upper limits.
        '''
        self.fun   = fun
        self.lower = lower  if not isinstance( lower, (tuple,list) ) else lower[0] if len(lower) is 1 else lower
        self.upper = upper  if not isinstance( upper, (tuple,list) ) else upper[0] if len(upper) is 1 else upper
        self.ndim  = len(lower) if isinstance( lower, (tuple,list) ) else 1
    
    def MC( self, max_error = 1e-3, lower = None, upper = None ):
        '''
            Performs MC integration from lower to upper with an uncertainty smaller than max_error.
        '''
        lower = self.lower if lower is None else lower
        upper = self.upper if upper is None else upper
        lims  = [(lower,upper)] if self.ndim is 1 else zip(lower,upper)
        V = reduce( operator.mul, [ up - low for low, up in lims ] )
        
        error = 1 + max_error
        f, f2, N = 0., 0., 0.
        R = RandomNumbers.MersenneTwister()
        
        while error > max_error or N < 100:
            N  += 1.
            x   = [ R.Uniform(low,up) for low,up in lims ]
            fx  = self.fun( *x )
            f  += fx
            f2 += fx**2
            error = V * math.sqrt( abs( f2 / N**2 - f**2 / N**3 ) )
        
        return V * f / N, error

    def Riemann( self, Ndivisions = 1e4, lower = None, upper = None ):
        '''
            Performs Riemann integration from lower to upper with Ndivisions.
        '''
        lower  = self.lower if lower is None else lower
        upper  = self.upper if upper is None else upper

        fx = 0.
        if self.ndim is 1:
            delta  = float(upper - lower) / Ndivisions
            for i in xrange(int(Ndivisions)):
                fx += self.fun( lower + (i+.5)*delta )
        else:
            delta  = float(upper[0] - lower[0]) / Ndivisions
            for i in xrange(int(Ndivisions)):
                newfun = lambda *args: self.fun( *( (lower[0] + (i+.5)*delta,) + args) )
                fx += Integrator( newfun, lower[1:], upper[1:] ).Riemann(Ndivisions)
            
        return fx * delta

class Fitter:
    '''
        Class for data fitting.
    '''
    def __init__( self, xdata, ydata ):
        assert len(xdata) == len(ydata), 'Datasets must have the same length'
        self.x = list( xdata )
        self.y = list( ydata )
        self.N = len(xdata)

#   Need a multidimensional optimizer
#    def Fit( self, fun, args0 ):
#        '''
#            Fit to a general function fun.
#        '''
#        chi2 = sum( lambda x,y: (x-y)**2, self.ydata, map( fun(args),self.xdata) )
#        Optimizer =


    def PolyFit( self, degree = 1 ):
        '''
            Performs the fit solving A x = B where x are the coeficients of the pol.
        '''
        a = [ [1.] * self.N ] + [ map( lambda x: math.pow( x, n+1 ), self.x) for n in range(degree) ]
        a = Array.Matrix(*a)
        b = Array.Vector(*self.y)
        
        self.A = a ** a.T()
        self.B = a ** b
        self.AI = self.A.Inverse()
        self.coefs = list(self.AI ** self.B)
        f = lambda x: sum( [self.coefs[i]*math.pow(x,i) for i in range(degree+1)] )
        chi2 = sum( [ math.pow( y - f(x), 2 ) for x,y in zip(self.x,self.y) ] )
        syx = math.sqrt( chi2 / ( self.N - degree - 1 ) )
        
        self.coefs_errors = [ syx * math.sqrt( self.AI[i][i] ) for i in range(degree+1) ]
        return zip( self.coefs, self.coefs_errors )

class Optimizer:
    '''
        Class for extrema finding.
    '''
    def __init__( self, F, xmin, xmax ):
        '''
            Initilize with some function F in a interval [xmin,xmax].
        '''
        self.ndim = len(xmin) if isinstance( xmin, (list,tuple) ) else 1
        self.fun  = F
        self.xmin = tuple(xmin) if isinstance( xmin, (list,tuple) ) else xmin
        self.xmax = tuple(xmax) if isinstance( xmax, (list,tuple) ) else xmax
        self.gold = ( 3 - math.sqrt(5) ) / 2 #golden ratio to perform better
    
    def Minimize( self, x0 = None, max_size = 1e-6, xmin = None, xmax = None ):
        return self._Minimize1D( x0, max_size, xmin, xmax ) if self.ndim is 1 else self._MinimizeND( x0, None, max_size, xmin, xmax )

    def Maximize( self, x0 = None, max_size = 1e-6, xmin = None, xmax = None ):
        return self._Maximize1D( x0, max_size, xmin, xmax ) if self.ndim is 1 else self._MaximizeND( x0, max_size, xmin, xmax )

    def _Minimize1D( self, x0 = None, max_size = 1e-6, xmin = None, xmax = None ):
        '''
            Brackets a minimum in the interval [xmin,xmax] in a smaller interval of size <= max_size.
            Output: ( minimum, minimum - lower limit, upper limit - minimum), f(minimum)
            Default values for xmin and xmax are those of the constructor.
        '''
        a = self.xmin if xmin is None else xmin
        c = self.xmax if xmax is None else xmax
        b = self._FirstMiddlePoint( a, c ) if x0 is None else x0
        
        while (c-a) > max_size:
            fb  = self.fun( b )
            new, closetoa = self._MiddlePoint( a, b, c )
            fnew = self.fun( new )
            if fnew < fb:
                a, b, c = (a, new, b) if closetoa else (b, new, c)
            else:
                a, b, c = (new, b, c) if closetoa else (a, b, new)
                
        return (new,new-a,b-new), fnew

    def _MinimizeND( self, x0 = None, v0 = None, max_size = 1e-6, xmin = (), xmax = (), max_iter = 1e5 ):
        '''
            Minimize in N dimensions.
        '''
        x0  = Array.Vector(x0)
        v0  = Array.Identity(self.ndim) if v0 is None else Array.Matrix(v0)
        fx0 = self.fun( x0 )
        
        x   = Array.Vector(x0)
        v   = v0
        fx  = fx0
        
        niterations = -1
        while True:
            niterations += 1
            print 'iteration number {0}'.format(niterations)
            
            fx1    = fx
            bigdim = 0
            bigval = 0.
            for i in range(self.ndim):
                fx2 = fx
                x, v1, fx =  self._MinimizeAlongPath( x, v[i], max_size )
                if fx2 - fx > bigval:
                    bigval = fx2 - fx
                    bigdim = i
        
            if 2 * ( fx1 - fx ) <= max_size * ( abs(fx1) + abs(fx) + 1e-6 ):
                return x, fx
            
            if niterations > max_iter:
                raise Warning('Minimum not found after {0} iterations. Try to increment the max_iter argument if you think it must exist a minimum.'.format(niterations))
                return None
            
            x1 = 2 * x - x0
            v1 = x - x0
            x0 = x
            fx2 = self.fun( x1 )
            
            if fx2 < fx1 and 2 * ( fx1 - 2 * fx + fx2 ) * math.sqrt( fx1 - fx - bigval ) - bigval * math.sqrt( fx1 - fx2 ):
                x, v1, fx =  self._MinimizeAlongPath( x, v1, max_size )
                v[bigdim] = Array.Vector( v[self.ndim] )
                v[self.ndim] = Array.Vector( v1 )

    def _MinimizeAlongPath( self, P, V, max_size ):
        F1D = lambda x: self.fun( (P + x * V) )
        xmin,fxmin = Optimizer( F1D, 0., 1. ).Minimize( max_size = max_size )
        Vnew = xmin[0] * V
        Pnew = P + Vnew
        return Pnew, Vnew, fxmin
    

    def _Maximize1D( self, x0 = None, max_size = 1e-6, xmin = None, xmax = None ):
        '''
            Brackets a maximum in the interval [xmin,xmax] in a smaller interval of size <= max_size.
            Output: ( maximum, maximum - lower limit, upper limit - maximum), f(maximum)
            Default values for xmin and xmax are those of the constructor.
        '''
        original = self.fun
        self.fun = lambda *args: -original(*args)
        output = self.Minimize( x0, max_size, xmin, xmax )
        self.fun = original
        return output[0], -output[1]

    def _FirstMiddlePoint( self, a, c ):
        '''
            Gets a random point within the interval where the function takes a smaller value than the limits to start iteration.
        '''
        R = random.Random()
        limit = min( self.fun(a), self.fun(c) )
        while True:
            point = random.uniform( a, c )
            if self.fun(point) < limit:
                return point

    def _MiddlePoint( self, a, b, c ):
        '''
            Return the middle point for the next iteration.
        '''
        return ( b - self.gold * ( b - a ), True ) if b - a > c - b else ( b + self.gold * ( c - b ), False )

class Interpolator:
    '''
        A class to interpolate data with splines of arbitrary odd-order (order < npoints).
    '''
    def __init__( self, xdata, ydata, order = 3 ):
        self.xdata = list(xdata)
        self.ydata = list(ydata)
        self.ndata = len(xdata)
        self.order = order
        self.left  = (order+1)//2 - 1
        self.right = self.left + 2

    def __call__( self, x0 ):
        '''
            Get interpolated value at x0.
        '''
        found = False
        for i in xrange(self.ndata-1):
            if x0 >= self.xdata[i] and x0 < self.xdata[i+1]:
                found = True
                if i < self.left:
                    xsubset = self.xdata[:self.order+1]
                    ysubset = self.ydata[:self.order+1]
                elif i == self.ndata + 1 - self.right:
                    xsubset = self.xdata[-self.order-1:]
                    ysubset = self.ydata[-self.order-1:]
                else:
                    xsubset = self.xdata[i-self.left:i+self.right]
                    ysubset = self.ydata[i-self.left:i+self.right]
                break
        if not found:
            raise RuntimeError( 'Data point {0} out of range [{1},{2})'.format(x0,self.xdata[0],self.xdata[-1]) )
        return PolynomialInterpolator( xsubset, ysubset )(x0)


if __name__ == '__main__':
#    from math import sin,log
#    from ROOT import *
#    fun = lambda x: log(x) - sin(x)**2 + cos(x)
#    x = map(float, range(1,101))
#    y = map( fun, x )
#
#    interpolator = Interpolator( x, y, 7 )
#
#    xfull = [ 0.1*i for i in range(10,1000)]
#    yfull = map( interpolator, xfull )
#    yreal = map( fun, xfull )
#    
#    data = TGraph(); data.SetMarkerStyle(20)
#    curve = TGraph();curve.SetLineColor(2);curve.SetLineWidth(2)
#    real = TGraph();real.SetLineColor(4);real.SetLineWidth(2)
#    [data.SetPoint(i,xi,yi) for i,(xi,yi) in enumerate(zip(x,y))]
#    [curve.SetPoint(i,xi,yi) for i,(xi,yi) in enumerate(zip(xfull,yfull))]
#    [real.SetPoint(i,xi,yi) for i,(xi,yi) in enumerate(zip(xfull,yreal))]
#    real.Draw('AC')
#    curve.Draw('sameC')
#    data.Draw('sameP')
#    f = lambda v: v[0]**2 + (v[1]-1)**2
#    mini = Optimizer( f, (-2,-2),(+2,+2) )
#    print mini.Minimize( (0.1,1.1), 1e-2)

    f = lambda x: x**2
    print Integrator(f,(-1,),(+1,)).MC()
    print Integrator(f,(-1,),(+1,)).Riemann()
    f = lambda x,y: x**2 + y**2
    print Integrator(f,(-1,-1),(1,1)).MC()
    print Integrator(f,(-1,-1),(1,1)).Riemann()